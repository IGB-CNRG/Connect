security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\Person
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    mailing_list:
        pattern: ^/mailing-list
        provider: app_user_provider
        http_basic_ldap:
          service: Symfony\Component\Ldap\Ldap
          dn_string: '%env(LDAP_DN)%'
    main:
      lazy: true
      provider: app_user_provider
      form_login_ldap:
        login_path: login
        check_path: login
        enable_csrf: true
        service: Symfony\Component\Ldap\Ldap
        dn_string: '%env(LDAP_DN)%'
        success_handler: App\Security\SkipAPISuccessHandler
      switch_user: true
      logout:
        path: logout

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login, roles: PUBLIC_ACCESS } # Anyone can see the login page
    - { attributes: {'_route': 'membership_entryForm'}, roles: PUBLIC_ACCESS } # Anyone can access the entry form
    - { attributes: {'_route': 'membership_continueEntryForm'}, roles: PUBLIC_ACCESS }
    - { attributes: {'_route': '_api_/people{._format}_get_collection'}, roles: PUBLIC_ACCESS } # Entry form needs to be able to access this api
    - { path: ^/admin, roles: ROLE_ADMIN } # Only admins can access the admin portal
    - { path: ^/directory, roles: PUBLIC_ACCESS }
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

  role_hierarchy:
    ROLE_ADMIN:
      - ROLE_ALLOWED_TO_SWITCH
#      - ROLE_KEY_MANAGER
      - ROLE_CERTIFICATE_MANAGER
      - ROLE_APPROVER
    ROLE_CERTIFICATE_MANAGER:
      - ROLE_APPROVER
    ROLE_HR:
      - ROLE_APPROVER

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
